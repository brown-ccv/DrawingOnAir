/**
 * \author Dan Keefe (dfk)
 *
 * \file  DirectDrawHCI.H
 * \brief
 *
 */


#ifndef DIRECTDRAWHCI_H
#define DIRECTDRAWHCI_H

//#include "VRBase.H"
#include <VRG3DBaseApp.h>
#include "BrushState.H"
#include "CavePaintingCursors.H"
#include "HCIMgr.H"

namespace DrawOnAir {

typedef G3D::ReferenceCountedPointer<class DirectDrawHCI> DirectDrawHCIRef;
/** Interface for brush input mapped directly from EventCoordinateFrames
    usually generated by a 6DOF device to creating a Mark.
*/
class DirectDrawHCI : public StylusHCI
{
public:
  DirectDrawHCI(G3D::Array<std::string>     brushOnTriggers,
                G3D::Array<std::string>     brushMotionTriggers, 
                G3D::Array<std::string>     brushOffTriggers,
                G3D::Array<std::string>     handMotionTriggers, 
                BrushRef               brush,
                CavePaintingCursorsRef cursors,
                EventMgrRef            eventMgr);
  virtual ~DirectDrawHCI();

  void setEnabled(bool b);
  bool canReleaseFocus();

  // interactor methods
  void brushMotion(MinVR::EventRef e);
  void brushOn(MinVR::EventRef e);
  void brushPressureChange(MinVR::EventRef e);
  void brushPhysicalFrameChange(MinVR::EventRef e);
  void brushDrawMotion(MinVR::EventRef e);
  void brushOff(MinVR::EventRef e);

  void handMotion(MinVR::EventRef e);
  void headMotion(MinVR::EventRef e);

  void updateDrawingDir();
  void smoothOutPressure();

protected:
  BrushRef               _brush;
  CavePaintingCursorsRef _cursors;
  EventMgrRef            _eventMgr;
  FsaRef                 _fsa;
  bool                   _enabled;
  G3D::Vector3                _lastPosForDirCalc;
  double                 _dirCalcDistThreshold;

private:
  DirectDrawHCI(const DirectDrawHCI &);
  DirectDrawHCI& operator=(const DirectDrawHCI &);
};


} // end namespace
#endif
