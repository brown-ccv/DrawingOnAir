/**
 * \author Dan Keefe (dfk)
 *
 * \file  BlendHCI.H
 * \brief
 *
 */


#ifndef BLENDHCI_H
#define BLENDHCI_H

//#include "VRBase.H"
#include <Event.h>
#include <EventMgr.H>

#include "Brush.H"
#include "BrushState.H"
#include "CavePaintingCursors.H"
#include "HCIMgr.H"

namespace DrawOnAir {

typedef G3D::ReferenceCountedPointer<class BlendHCI> BlendHCIRef;
/** Interface for brush input mapped directly from EventCoordinateFrames
    usually generated by a 6DOF device to creating a Mark.
*/
class BlendHCI : public StylusHCI
{
public:
  BlendHCI(G3D::Array<std::string>     brushOnTriggers,
           G3D::Array<std::string>     brushMotionTriggers, 
           G3D::Array<std::string>     brushOffTriggers,
           BrushRef          brush,
           CavePaintingCursorsRef cursors,
           MinVR::EventMgrRef            eventMgr,
           MinVR::GfxMgrRef              gfxMgr);
  virtual ~BlendHCI();

  void setEnabled(bool b);
  bool canReleaseFocus();

  // interactor methods
  void brushMotion(MinVR::EventRef e);
  void brushOn(MinVR::EventRef e);
  void brushPressureChange(MinVR::EventRef e);
  void brushDrawMotion(MinVR::EventRef e);
  void brushOff(MinVR::EventRef e);

protected:
  BrushRef               _brush;
  CavePaintingCursorsRef _cursors;
  MinVR::EventMgrRef            _eventMgr;
  MinVR::FsaRef                 _fsa;
  MinVR::GfxMgrRef              _gfxMgr;
  bool                   _enabled;
  G3D::Array<G3D::Vector3>         _offsets;
  G3D::Array<double>          _pigment;
  G3D::Array<double>          _colors;
  G3D::Box                    _box;

  // Marks that are currently being created, organized by colorSwatchIndex.
  G3D::Table<std::string, MarkRef> _marks;
  G3D::Table<std::string, BrushStateRef> _brushStates;

private:
  BlendHCI(const BlendHCI &);
  BlendHCI& operator=(const BlendHCI &);
};


} // end namespace
#endif
