/**
 * \author Dan Keefe (dfk)
 *
 * \file  PlaceSlideHCI.H
 * \brief
 *
 */


#ifndef PLACESLIDEHCI_H
#define PLACESLIDEHCI_H

//#include "VRBase.H"
#include "BrushState.H"
#include "CavePaintingCursors.H"
#include "HCIMgr.H"

namespace DrawOnAir {

typedef G3D::ReferenceCountedPointer<class PlaceSlideHCI> PlaceSlideHCIRef;
/** Interface for brush input mapped directly from EventCoordinateFrames
    usually generated by a 6DOF device to creating a Mark.
*/
class PlaceSlideHCI : public StylusHCI
{
public:
  PlaceSlideHCI(G3D::Array<std::string>     brushOnTriggers,
                G3D::Array<std::string>     brushMotionTriggers, 
                G3D::Array<std::string>     brushOffTriggers,
                G3D::Array<std::string>     handMotionTriggers, 
                BrushRef               brush,
                CavePaintingCursorsRef cursors,
    MinVR::EventMgrRef            eventMgr,
    MinVR::GfxMgrRef              gfxMgr);
  virtual ~PlaceSlideHCI();

  void setEnabled(bool b);
  bool canReleaseFocus();

  // interactor methods
  void brushMotion(MinVR::EventRef e);
  void handMotion(MinVR::EventRef e);
  void headMotion(MinVR::EventRef e);
  void brushOn(MinVR::EventRef e);
  void brushOff(MinVR::EventRef e);

  void setSlideName(const std::string &name) { _slideName = name; }

  void draw(G3D::RenderDevice *rd, const G3D::CoordinateFrame &virtualToRoomSpace);

protected:
  BrushRef               _brush;
  CavePaintingCursorsRef _cursors;
  MinVR::EventMgrRef            _eventMgr;
  MinVR::GfxMgrRef              _gfxMgr;
  MinVR::FsaRef                 _fsa;
  bool                   _enabled;
  int                    _dcbid;
  std::string            _slideName;

private:
  PlaceSlideHCI(const PlaceSlideHCI &);
  PlaceSlideHCI& operator=(const PlaceSlideHCI &);
};


} // end namespace
#endif
