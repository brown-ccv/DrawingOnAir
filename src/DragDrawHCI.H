/**
 * \author Dan Keefe (dfk)
 *
 * \file  DragDrawHCI.H
 * \brief
 *
 */


#ifndef DragDrawHCI_H
#define DragDrawHCI_H

//#include "VRBase.H"
#include <VRG3DBaseApp.H>

#include "BrushState.H"
#include "CavePaintingCursors.H"
#include "HCIMgr.H"

namespace DrawOnAir {

typedef G3D::ReferenceCountedPointer<class DragDrawHCI> DragDrawHCIRef;
/** Interface for brush input mapped directly from EventCoordinateFrames
    usually generated by a 6DOF device to creating a Mark.
*/
class DragDrawHCI : public StylusHCI
{
public:
  DragDrawHCI(G3D::Array<std::string>     brushOnTriggers,
              G3D::Array<std::string>     brushMotionTriggers, 
              G3D::Array<std::string>     brushOffTriggers,
              G3D::Array<std::string>     handMotionTriggers, 
              BrushRef               brush,
              CavePaintingCursorsRef cursors,
              MinVR::EventMgrRef            eventMgr,
              MinVR::GfxMgrRef              gfxMgr);
  virtual ~DragDrawHCI();

  void setEnabled(bool b);
  bool canReleaseFocus();

  void setLineLength(double d);

  // interactor methods
  void brushMotion(MinVR::EventRef e);
  void brushInitialClick(MinVR::EventRef e);
  void brushWaitMotion(MinVR::EventRef e);
  void brushOn(MinVR::EventRef e);
  void brushPressureChange(MinVR::EventRef e);
  void brushPhysicalFrameChange(MinVR::EventRef e);
  void brushDrawMotion(MinVR::EventRef e);
  void brushOff(MinVR::EventRef e);

  void handMotion(MinVR::EventRef e);
  void headMotion(MinVR::EventRef e);

  void draw(G3D::RenderDevice *rd, const G3D::CoordinateFrame &virtualToRoomSpace);

protected:
  BrushRef               _brush;
  CavePaintingCursorsRef _cursors;
  MinVR::EventMgrRef            _eventMgr;
  MinVR::FsaRef                 _fsa;
  MinVR::GfxMgrRef              _gfxMgr;
  bool                   _enabled;
  int                    _drawID;
  G3D::Vector3                _dragPoint;
  double                 _lineLength;
  double                 _interpLineLength;
  double                 _pathLength;

private:
  DragDrawHCI(const DragDrawHCI &);
  DragDrawHCI& operator=(const DragDrawHCI &);
};


} // end namespace
#endif
